// Code generated by goyacc -o /Users/amisi/projects/i2/internal/parser/y.go /Users/amisi/projects/i2/internal/parser/syntax.go.y. DO NOT EDIT.

//line /Users/amisi/projects/i2/internal/parser/syntax.go.y:2
package parser

import __yyfmt__ "fmt"

//line /Users/amisi/projects/i2/internal/parser/syntax.go.y:2

import (
	"fmt"

	"git.sr.ht/~lbnz/i2/internal/symbol"
	"git.sr.ht/~lbnz/i2/internal/truth"
)

var sigma = symbol.Table{"1": symbol.Any}

//line /Users/amisi/projects/i2/internal/parser/syntax.go.y:14
type yySymType struct {
	yys  int
	s    string
	sarr []string
	n    int
	b    bool

	sym_op       symbol.Operator
	sym_tmpl     symbol.Template
	sym_func     symbol.Function
	sym_type     symbol.Type
	sym_paramarr []symbol.Parameter

	sym_expr       symbol.Expr
	sym_exprarr    []symbol.Expr
	sym_pfexpr     symbol.PostfixExpr
	sym_pfexpr_ptr *symbol.PostfixExpr
}

const tkIdentifier = 57346
const tkConstant = 57347
const tkFalse = 57348
const tkTrue = 57349
const tkLt = 57350
const tkGt = 57351
const tkEq = 57352
const tkNe = 57353
const tkAnd = 57354
const tkOr = 57355
const tkEqv = 57356
const tkImpl = 57357
const tkFllw = 57358
const tkTmpl = 57359
const tkFunc = 57360
const tkThis = 57361

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"tkIdentifier",
	"tkConstant",
	"tkFalse",
	"tkTrue",
	"tkLt",
	"tkGt",
	"tkEq",
	"tkNe",
	"tkAnd",
	"tkOr",
	"tkEqv",
	"tkImpl",
	"tkFllw",
	"tkTmpl",
	"tkFunc",
	"tkThis",
	"';'",
	"'@'",
	"'('",
	"')'",
	"'{'",
	"'}'",
	"','",
	"'!'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line /Users/amisi/projects/i2/internal/parser/syntax.go.y:231

//line yacctab:1
var yyExca = [...]int8{
	-1, 0,
	1, 2,
	-2, 4,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 5,
	1, 2,
	-2, 4,
	-1, 26,
	4, 13,
	18, 13,
	-2, 36,
	-1, 27,
	4, 14,
	18, 14,
	-2, 35,
}

const yyPrivate = 57344

const yyLast = 104

var yyAct = [...]int8{
	22, 35, 39, 24, 25, 28, 13, 37, 18, 27,
	26, 32, 31, 27, 26, 32, 31, 77, 61, 52,
	53, 32, 31, 75, 50, 55, 74, 33, 65, 4,
	42, 33, 29, 37, 54, 51, 29, 33, 38, 57,
	36, 14, 29, 37, 15, 59, 56, 12, 58, 5,
	48, 66, 73, 62, 49, 63, 68, 6, 7, 69,
	45, 46, 47, 72, 71, 45, 46, 47, 45, 46,
	47, 76, 45, 46, 47, 78, 70, 20, 19, 43,
	40, 67, 45, 46, 47, 23, 20, 19, 10, 1,
	9, 2, 60, 64, 41, 8, 17, 30, 16, 34,
	21, 11, 44, 3,
}

var yyPact = [...]int16{
	8, -1000, 29, 40, -1000, 8, 86, 84, -1000, 25,
	19, 20, 73, -1000, 82, 9, 17, 14, 76, -1000,
	-1000, 7, 54, -19, 37, 42, -1000, 2, -1000, 15,
	-1000, -1000, -1000, 9, -1000, -1000, 1, 82, 9, -1000,
	-1000, 19, 76, -1000, -6, -1000, -1000, -1000, 15, 15,
	5, -1000, 2, -1000, 58, 9, 76, 51, -1000, -1000,
	15, 48, 42, -1000, 0, -1000, 68, -1000, 46, -1000,
	-1000, 37, -8, 2, 9, -1000, -1000, -1000, 68,
}

var yyPgo = [...]int8{
	0, 103, 8, 2, 102, 101, 6, 85, 0, 4,
	3, 5, 99, 97, 93, 1, 92, 89, 91,
}

var yyR1 = [...]int8{
	0, 17, 17, 1, 1, 18, 18, 5, 5, 5,
	6, 7, 7, 2, 2, 3, 3, 8, 8, 8,
	16, 16, 4, 4, 4, 10, 10, 9, 9, 11,
	11, 13, 13, 13, 13, 12, 12, 12, 14, 14,
	15, 15,
}

var yyR2 = [...]int8{
	0, 3, 0, 1, 0, 4, 4, 6, 5, 4,
	4, 4, 2, 1, 1, 1, 2, 4, 1, 1,
	3, 0, 1, 1, 1, 3, 1, 3, 1, 2,
	1, 1, 1, 3, 1, 1, 1, 1, 3, 1,
	4, 3,
}

var yyChk = [...]int16{
	-1000, -17, -18, -1, 21, 20, 17, 18, -17, 4,
	4, -5, 22, -6, 22, 24, -7, 23, -2, 5,
	4, -7, -8, -7, -10, -9, 5, 4, -11, 27,
	-13, 7, 6, 22, -12, -15, 23, 26, 24, -3,
	4, 18, 23, 25, -4, 14, 15, 16, 13, 12,
	22, -11, 4, 5, -8, 24, -2, -8, -6, -3,
	-16, 24, -9, -11, -14, 23, -8, 23, -8, -3,
	25, -10, -15, 4, 26, 23, 25, 25, -8,
}

var yyDef = [...]int8{
	-2, -2, 0, 0, 3, -2, 0, 0, 1, 0,
	0, 5, 0, 6, 0, 0, 0, 0, 0, 13,
	14, 0, 0, 18, 19, 26, -2, -2, 28, 0,
	30, 31, 32, 0, 34, 37, 0, 0, 0, 12,
	15, 0, 0, 9, 21, 22, 23, 24, 0, 0,
	0, 29, 35, 36, 0, 0, 0, 0, 16, 10,
	0, 0, 25, 27, 0, 41, 39, 33, 0, 11,
	8, 17, 0, 0, 0, 40, 7, 20, 38,
}

var yyTok1 = [...]int8{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 27, 3, 3, 3, 3, 3, 3,
	22, 23, 3, 3, 26, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 20,
	3, 3, 3, 3, 21, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 24, 3, 25,
}

var yyTok2 = [...]int8{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19,
}

var yyTok3 = [...]int8{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line /Users/amisi/projects/i2/internal/parser/syntax.go.y:63
		{
			yyVAL.b = true
		}
	case 4:
		yyDollar = yyS[yypt-0 : yypt+1]
//line /Users/amisi/projects/i2/internal/parser/syntax.go.y:64
		{
			yyVAL.b = false
		}
	case 5:
		yyDollar = yyS[yypt-4 : yypt+1]
//line /Users/amisi/projects/i2/internal/parser/syntax.go.y:68
		{
			yyDollar[4].sym_tmpl.IsAxiom = yyDollar[1].b
			sigma[yyDollar[3].s] = yyDollar[4].sym_tmpl

			tbl, err := yyDollar[4].sym_tmpl.Table()
			if err != nil {
				yylex.Error(err.Error())
			}
			aExpr, err := yyDollar[4].sym_tmpl.E.Analyse(tbl.Nest(sigma))
			if err != nil {
				yylex.Error(err.Error())
			}
			result.WriteString(fmt.Sprintf("tmpl %s %v\n", yyDollar[3].s, aExpr))
			for _, prf := range yyDollar[4].sym_tmpl.Proofs {
				result.WriteString(fmt.Sprintf("proof:\n"))
				for _, expr := range prf {
					result.WriteString(fmt.Sprintf("\t%s\n", expr))
					aExpr, err := expr.Analyse(tbl.Nest(sigma))
					if err != nil {
						yylex.Error(err.Error())
					}
					outcome, err := truth.Decide(aExpr.P)
					if err != nil {
						yylex.Error(err.Error())
					}
					if !outcome {
						yylex.Error("contradiction")
					}
				}
				result.WriteString(fmt.Sprintf("qed\n"))
			}
		}
	case 6:
		yyDollar = yyS[yypt-4 : yypt+1]
//line /Users/amisi/projects/i2/internal/parser/syntax.go.y:100
		{
			yyDollar[4].sym_func.IsAxiom = yyDollar[1].b
			sigma[yyDollar[3].s] = yyDollar[4].sym_func
		}
	case 7:
		yyDollar = yyS[yypt-6 : yypt+1]
//line /Users/amisi/projects/i2/internal/parser/syntax.go.y:107
		{
			yyVAL.sym_tmpl = symbol.Template{
				Params: yyDollar[2].sym_paramarr,
				E:      yyDollar[5].sym_expr,
				Proofs: []symbol.RelationChain{},
			}
		}
	case 8:
		yyDollar = yyS[yypt-5 : yypt+1]
//line /Users/amisi/projects/i2/internal/parser/syntax.go.y:114
		{
			yyVAL.sym_tmpl = symbol.Template{
				Params: []symbol.Parameter{},
				E:      yyDollar[4].sym_expr,
				Proofs: []symbol.RelationChain{},
			}
		}
	case 9:
		yyDollar = yyS[yypt-4 : yypt+1]
//line /Users/amisi/projects/i2/internal/parser/syntax.go.y:121
		{
			prf, ok := yyDollar[3].sym_expr.(symbol.JustifiableBinaryOpExpr)
			if !ok {
				yylex.Error("non bop proof")
			}
			yyVAL.sym_tmpl = symbol.Template{
				Params: yyVAL.sym_tmpl.Params,
				E:      yyVAL.sym_tmpl.E,
				Proofs: append(yyVAL.sym_tmpl.Proofs, prf.Quantise()),
			}
		}
	case 10:
		yyDollar = yyS[yypt-4 : yypt+1]
//line /Users/amisi/projects/i2/internal/parser/syntax.go.y:135
		{
			yyVAL.sym_func = symbol.Function{
				Sig: symbol.FunctionSignature{
					Params: yyDollar[2].sym_paramarr,
					Return: symbol.Type(yyDollar[4].s),
				},
			}
		}
	case 11:
		yyDollar = yyS[yypt-4 : yypt+1]
//line /Users/amisi/projects/i2/internal/parser/syntax.go.y:147
		{
			yyVAL.sym_paramarr = append(yyDollar[1].sym_paramarr, symbol.Parameter{Name: yyDollar[3].s, Type: symbol.Type(yyDollar[4].s)})
		}
	case 12:
		yyDollar = yyS[yypt-2 : yypt+1]
//line /Users/amisi/projects/i2/internal/parser/syntax.go.y:149
		{
			yyVAL.sym_paramarr = []symbol.Parameter{symbol.Parameter{Name: yyDollar[1].s, Type: symbol.Type(yyDollar[2].s)}}
		}
	case 13:
		yyDollar = yyS[yypt-1 : yypt+1]
//line /Users/amisi/projects/i2/internal/parser/syntax.go.y:153
		{
			yyVAL.s = yyDollar[1].s
		}
	case 14:
		yyDollar = yyS[yypt-1 : yypt+1]
//line /Users/amisi/projects/i2/internal/parser/syntax.go.y:154
		{
			yyVAL.s = yyDollar[1].s
		}
	case 15:
		yyDollar = yyS[yypt-1 : yypt+1]
//line /Users/amisi/projects/i2/internal/parser/syntax.go.y:158
		{
			yyVAL.s = yyDollar[1].s
		}
	case 16:
		yyDollar = yyS[yypt-2 : yypt+1]
//line /Users/amisi/projects/i2/internal/parser/syntax.go.y:159
		{
			yyVAL.s = "func"
		}
	case 17:
		yyDollar = yyS[yypt-4 : yypt+1]
//line /Users/amisi/projects/i2/internal/parser/syntax.go.y:163
		{
			yyVAL.sym_expr = symbol.JustifiableBinaryOpExpr{
				BinaryOpExpr: symbol.BinaryOpExpr{Op: yyDollar[2].sym_op, E1: yyDollar[1].sym_expr, E2: yyDollar[4].sym_expr},
				Just:         yyDollar[3].sym_pfexpr_ptr,
			}
		}
	case 18:
		yyDollar = yyS[yypt-1 : yypt+1]
//line /Users/amisi/projects/i2/internal/parser/syntax.go.y:169
		{
			// TODO reconcile this with Expr
			yyVAL.sym_expr = symbol.ConstantExpr(false)
		}
	case 20:
		yyDollar = yyS[yypt-3 : yypt+1]
//line /Users/amisi/projects/i2/internal/parser/syntax.go.y:178
		{
			var x = yyDollar[2].sym_pfexpr
			yyVAL.sym_pfexpr_ptr = &x
		}
	case 21:
		yyDollar = yyS[yypt-0 : yypt+1]
//line /Users/amisi/projects/i2/internal/parser/syntax.go.y:180
		{
			yyVAL.sym_pfexpr_ptr = nil
		}
	case 22:
		yyDollar = yyS[yypt-1 : yypt+1]
//line /Users/amisi/projects/i2/internal/parser/syntax.go.y:184
		{
			yyVAL.sym_op = symbol.Eqv
		}
	case 23:
		yyDollar = yyS[yypt-1 : yypt+1]
//line /Users/amisi/projects/i2/internal/parser/syntax.go.y:185
		{
			yyVAL.sym_op = symbol.Impl
		}
	case 24:
		yyDollar = yyS[yypt-1 : yypt+1]
//line /Users/amisi/projects/i2/internal/parser/syntax.go.y:186
		{
			yyVAL.sym_op = symbol.Fllw
		}
	case 25:
		yyDollar = yyS[yypt-3 : yypt+1]
//line /Users/amisi/projects/i2/internal/parser/syntax.go.y:191
		{
			yyVAL.sym_expr = symbol.BinaryOpExpr{Op: symbol.Or, E1: yyDollar[1].sym_expr, E2: yyDollar[3].sym_expr}
		}
	case 27:
		yyDollar = yyS[yypt-3 : yypt+1]
//line /Users/amisi/projects/i2/internal/parser/syntax.go.y:197
		{
			yyVAL.sym_expr = symbol.BinaryOpExpr{Op: symbol.And, E1: yyDollar[1].sym_expr, E2: yyDollar[3].sym_expr}
		}
	case 29:
		yyDollar = yyS[yypt-2 : yypt+1]
//line /Users/amisi/projects/i2/internal/parser/syntax.go.y:202
		{
			yyVAL.sym_expr = symbol.NegatedExpr{yyDollar[2].sym_expr}
		}
	case 31:
		yyDollar = yyS[yypt-1 : yypt+1]
//line /Users/amisi/projects/i2/internal/parser/syntax.go.y:207
		{
			yyVAL.sym_expr = symbol.ConstantExpr(true)
		}
	case 32:
		yyDollar = yyS[yypt-1 : yypt+1]
//line /Users/amisi/projects/i2/internal/parser/syntax.go.y:208
		{
			yyVAL.sym_expr = symbol.ConstantExpr(false)
		}
	case 33:
		yyDollar = yyS[yypt-3 : yypt+1]
//line /Users/amisi/projects/i2/internal/parser/syntax.go.y:209
		{
			yyVAL.sym_expr = symbol.BracketedExpr{yyDollar[2].sym_expr}
		}
	case 35:
		yyDollar = yyS[yypt-1 : yypt+1]
//line /Users/amisi/projects/i2/internal/parser/syntax.go.y:215
		{
			yyVAL.sym_expr = symbol.SimpleExpr(yyDollar[1].s)
		}
	case 36:
		yyDollar = yyS[yypt-1 : yypt+1]
//line /Users/amisi/projects/i2/internal/parser/syntax.go.y:216
		{
			yyVAL.sym_expr = symbol.SimpleExpr(yyDollar[1].s)
		}
	case 37:
		yyDollar = yyS[yypt-1 : yypt+1]
//line /Users/amisi/projects/i2/internal/parser/syntax.go.y:217
		{
			yyVAL.sym_expr = symbol.Expr(yyDollar[1].sym_pfexpr)
		}
	case 38:
		yyDollar = yyS[yypt-3 : yypt+1]
//line /Users/amisi/projects/i2/internal/parser/syntax.go.y:221
		{
			yyVAL.sym_exprarr = append(yyDollar[1].sym_exprarr, yyDollar[3].sym_expr)
		}
	case 39:
		yyDollar = yyS[yypt-1 : yypt+1]
//line /Users/amisi/projects/i2/internal/parser/syntax.go.y:222
		{
			yyVAL.sym_exprarr = []symbol.Expr{yyDollar[1].sym_expr}
		}
	case 40:
		yyDollar = yyS[yypt-4 : yypt+1]
//line /Users/amisi/projects/i2/internal/parser/syntax.go.y:227
		{
			yyVAL.sym_pfexpr = symbol.PostfixExpr{yyDollar[1].s, yyDollar[3].sym_exprarr}
		}
	case 41:
		yyDollar = yyS[yypt-3 : yypt+1]
//line /Users/amisi/projects/i2/internal/parser/syntax.go.y:229
		{
			yyVAL.sym_pfexpr = symbol.PostfixExpr{yyDollar[1].s, []symbol.Expr{}}
		}
	}
	goto yystack /* stack new state and value */
}
