@func eq(x any, y any) bool;

@func nat(x any) bool;

/* Peano axioms */

/* one: 1 is a natural number. */
@tmpl one() { 1 nat };

/* succ: For each x there exists exactly one natural number, called the
 * successor of x, which will be denoted by succ(x). */
@func succ(x nat) nat;

/* succ_notone: We always have succ(x) != 1. */
@tmpl succ_notone(x nat) { !eq(succ(x), 1) };

/* injectivity: If succ(x) == succ(y) then x == y. */ 
@tmpl injectivity(x nat, y nat) { eq(succ(x), succ(y)) ==> eq(x, y) };

/* induction: The axiom of induction. */
@tmpl induction(y func(nat) bool) {
	y(1) && (x nat) { y(x) ==> y(succ(x)) }
==> 	(x nat) y(x)
};

tmpl thm1(a nat, b nat) { !eq(a, b) ==> !eq(succ(a), succ(b)) } {
	!( !eq(a, b) ==> !eq(succ(a), succ(b)) )
===	!eq(a, b) && eq(succ(a), succ(b))
==> { injectivity(a, b) }
	eq(a, b) && !eq(a, b)
===	false
} {
	eq(succ(a), succ(b))
==> { injectivity(a, b) }
	eq(a, b)
};

tmpl thm2(x nat) { !eq(succ(x), x) } {
	&{
		/* base case */
		this(1)
	<== { succ_notone(1) }
		1 nat
	=== { one() }; /* implied by auto zero; left here to show syntax */

		/* inductive case */
		(x nat) this(x)
	==> { thm1(succ(x), x) }
		(x nat) this(succ(x));
	}
===
	this(1) && (x nat) { this(x) ==> this(succ(x)) }
==> { induction(this) }
	this(x);
};
