@func eq(x any, y any) bool;

@func nat(x any) bool;

/* Peano axioms */

/* 1 is a natural number. */
term 1 nat;

/* succ: For each x there exists exactly one natural number, called the
 * successor of x, which will be denoted by succ(x). */
@func succ(x nat) nat;

/* succ_notone: We always have succ(x) != 1. */
@tmpl succ_notone(x nat) { !eq(succ(x), 1) };

/* injectivity: If succ(x) == succ(y) then x == y. */ 
@tmpl injectivity(x nat, y nat) { eq(succ(x), succ(y)) ==> eq(x, y) };

/* induction: The axiom of induction. */
@tmpl induction(P func(nat) bool) {
	P(1) && (x nat) { P(x) ==> P(succ(x)) }
==> 	(x nat) { P(x) }
};

@tmpl application(P func(nat) bool, w nat) {
	(x nat) { P(x) }
==>	P(w)
};

tmpl thm1(a nat, b nat) { !eq(a, b) ==> !eq(succ(a), succ(b)) } {
	!( !eq(a, b) ==> !eq(succ(a), succ(b)) )
===	!eq(a, b) && eq(succ(a), succ(b))
==> { injectivity(a, b) }
	eq(a, b) && !eq(a, b)
===	false;
} {
	eq(succ(a), succ(b))
==> { injectivity(a, b) }
	eq(a, b);
};


tmpl thm2(x nat) { !eq(succ(x), x) } {
base:	this(1)
<== { succ_notone(1) }
	true;

induct: (x nat) {
		this(x)
	==> { thm1(succ(x), x) }
		this(succ(x))
	};

	base && induct
===	this(1) && (x nat) { this(x) ==> this(succ(x)) }
==> { induction(this) }
	(x nat) { this(x) }
==> { application(this, x) }	
	this(x);
};
